--- a/include/configs/mx8mm-influx-rex-smart.h		2024-12-02 14:34:18.424663887 +0000
+++ b/include/configs/mx8mm-influx-rex-smart.h		2024-11-28 11:53:25.059518442 +0000
@@ -15,9 +15,8 @@
 #undef CONFIG_DM_I2C
 #endif
 
-
 #define CFG_SYS_UBOOT_BASE	\
-	(QSPI0_AMBA_BASE + CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR * 512)
+    (QSPI0_AMBA_BASE + CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR * 512)
 
 #ifdef CONFIG_SPL_BUILD
 /* malloc f used before GD_FLG_FULL_MALLOC_INIT set */
@@ -28,116 +27,113 @@
 
 #ifdef CONFIG_DISTRO_DEFAULTS
 #define BOOT_TARGET_DEVICES(func) \
-	func(USB, usb, 0) \
-	func(MMC, mmc, 1) \
-	func(MMC, mmc, 2)
+    func(USB, usb, 0) \
+    func(MMC, mmc, 1) \
+    func(MMC, mmc, 2)
 
 #include <config_distro_bootcmd.h>
 #else
 #define BOOTENV
 #endif
 
-
 /*
  * Another approach is add the clocks for inmates into clks_init_on
  * in clk-imx8mm.c, then clk_ingore_unused could be removed.
  */
 #define JAILHOUSE_ENV \
-	"jh_clk= \0 " \
-	"jh_mmcboot=setenv fdt_file fsl-imx8mm-evk-root.dtb;" \
-		"setenv jh_clk clk_ignore_unused; " \
-			   "if run loadimage; then " \
-				   "run mmcboot; " \
-			   "else run jh_netboot; fi; \0" \
-	"jh_netboot=setenv fdt_file fsl-imx8mm-evk-root.dtb; setenv jh_clk clk_ignore_unused; run netboot; \0 "
+    "jh_clk= \0 " \
+    "jh_mmcboot=setenv fdt_file fsl-imx8mm-evk-root.dtb;" \
+	"setenv jh_clk clk_ignore_unused; " \
+	"if run loadimage; then " \
+	    "run mmcboot; " \
+	"else run jh_netboot; fi; \0" \
+    "jh_netboot=setenv fdt_file fsl-imx8mm-evk-root.dtb; setenv jh_clk clk_ignore_unused; run netboot; \0"
 
 #define CFG_MFG_ENV_SETTINGS \
-	CFG_MFG_ENV_SETTINGS_DEFAULT \
-	"initrd_addr=0x43800000\0" \
-	"initrd_high=0xffffffffffffffff\0" \
-	"emmc_dev="__stringify(CONFIG_SYS_MMC_ENV_DEV)"\0"\
-	"sd_dev=0\0" \
+    CFG_MFG_ENV_SETTINGS_DEFAULT \
+    "initrd_addr=0x43800000\0" \
+    "initrd_high=0xffffffffffffffff\0" \
+    "emmc_dev="__stringify(CONFIG_SYS_MMC_ENV_DEV)"\0"\
+    "sd_dev=0\0"
 
 #define M_CORE_ENV \
-	"cm_addr=0x7e0000\0" \
-	"cm_image=cm_TCM_hello_world.bin\0" \
-	"cm_loadimage=fatload mmc ${mmcdev} ${loadaddr} ${cm_image}\0" \
-	"cm_boot=run cm_loadimage; cp.b ${loadaddr} ${cm_addr} ${filesize}; dcache flush; bootaux ${cm_addr}\0"
+    "cm_addr=0x7e0000\0" \
+    "cm_image=cm_TCM_hello_world.bin\0" \
+    "cm_loadimage=fatload mmc ${mmcdev} ${loadaddr} ${cm_image}\0" \
+    "cm_boot=run cm_loadimage; cp.b ${loadaddr} ${cm_addr} ${filesize}; dcache flush; bootaux ${cm_addr}\0"
 
 /* Initial environment variables */
 #define CFG_EXTRA_ENV_SETTINGS		\
-	CFG_MFG_ENV_SETTINGS \
-	BOOTENV \
-	JAILHOUSE_ENV \
-	"scriptaddr=0x43500000\0" \
-	"kernel_addr_r=" __stringify(CONFIG_SYS_LOAD_ADDR) "\0" \
-	M_CORE_ENV \
-	"bsp_script=boot.scr\0" \
-	"image=Image\0" \
-	"splashimage=0x50000000\0" \
-	"console=ttymxc1,115200\0" \
-	"fdt_addr_r=0x43000000\0"		\
-	"fdt_addr=0x43000000\0"			\
-	"fdt_high=0xffffffffffffffff\0"		\
-	"boot_fdt=try\0" \
-	"fdt_file=\0" \
-	"bootm_size=0x10000000\0" \
-	"initrd_addr=0x43800000\0"		\
-	"initrd_high=0xffffffffffffffff\0" \
-	"mmcdev="__stringify(CONFIG_SYS_MMC_ENV_DEV)"\0" \
-	"mmcpart=1\0" \
-	"mmcroot=" CFG_MMCROOT " rootwait rw\0" \
-	"mmcautodetect=yes\0" \
-	"mmcargs=setenv bootargs ${jh_clk} console=${console} root=${mmcroot} " \
-		"${args_from_script}\0" \
-	"loadbootscript=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${bsp_script};\0" \
-	"bootscript=echo Running bootscript from mmc ...; " \
-		"source\0" \
-	"loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}\0" \
-	"loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr_r} ${fdt_file}\0" \
-	"mmcboot=echo Booting from mmc ...; " \
-		"run mmcargs; " \
-		"if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
-			"if run loadfdt; then " \
-				"booti ${loadaddr} - ${fdt_addr_r}; " \
-			"else " \
-				"echo WARN: Cannot load the DT; " \
-			"fi; " \
-		"else " \
-			"echo wait for boot; " \
-		"fi;\0" \
-	"netargs=setenv bootargs ${jh_clk} console=${console} " \
-		"root=/dev/nfs " \
-		"${args_from_script}\0" \
-		"ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp\0" \
-	"netboot=echo Booting from net ...; " \
-		"run netargs;  " \
-		"if test ${ip_dyn} = yes; then " \
-			"setenv get_cmd dhcp; " \
-		"else " \
-			"setenv get_cmd tftp; " \
+    CFG_MFG_ENV_SETTINGS \
+    BOOTENV \
+    JAILHOUSE_ENV \
+    "scriptaddr=0x43500000\0" \
+    "kernel_addr_r=" __stringify(CONFIG_SYS_LOAD_ADDR) "\0" \
+    M_CORE_ENV \
+    "bsp_script=boot.scr\0" \
+    "image=Image\0" \
+    "splashimage=0x50000000\0" \
+    "console=ttymxc1,115200\0" \
+    "fdt_addr_r=0x43000000\0" \
+    "fdt_addr=0x43000000\0" \
+    "fdt_high=0xffffffffffffffff\0" \
+    "boot_fdt=try\0" \
+    "fdt_file=\0" \
+    "bootm_size=0x10000000\0" \
+    "initrd_addr=0x43800000\0" \
+    "initrd_high=0xffffffffffffffff\0" \
+    "mmcdev="__stringify(CONFIG_SYS_MMC_ENV_DEV)"\0" \
+    "mmcpart=2\0" \
+    "mmcroot=" CFG_MMCROOT " rootwait rw\0" \
+    "data_part=" DATA_PART "\0" \
+    "mmcautodetect=yes\0" \
+    "mmcargs=setenv bootargs console=${console} root=${mmcroot} rw\0" \
+    "loadbootscript=fatload mmc ${mmcdev}:1 ${loadaddr} ${bsp_script};\0" \
+    "bootscript=echo Running bootscript from mmc ...; source\0" \
+    "loadimage=fatload mmc ${mmcdev}:1 ${loadaddr} ${image}\0" \
+    "loadfdt=fatload mmc ${mmcdev}:1 ${fdt_addr_r} ${fdt_file}\0" \
+    "mmcboot=echo Booting from mmc ...; " \
+	"run mmcargs; " \
+	"if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
+	    "if run loadfdt; then " \
+		"booti ${loadaddr} - ${fdt_addr_r}; " \
+	    "else " \
+		"echo WARN: Cannot load the DT; " \
+	    "fi; " \
+	"else " \
+	    "echo wait for boot; " \
+	"fi;\0" \
+    "netargs=setenv bootargs ${jh_clk} console=${console} " \
+	"root=/dev/nfs ${args_from_script}\0" \
+    "ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp\0" \
+    "netboot=echo Booting from net ...; " \
+	"run netargs; " \
+	"if test ${ip_dyn} = yes; then " \
+	    "setenv get_cmd dhcp; " \
+	"else " \
+	    "setenv get_cmd tftp; " \
+	"fi; " \
+	"${get_cmd} ${loadaddr} ${image}; " \
+	"if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
+	    "if ${get_cmd} ${fdt_addr_r} ${fdt_file}; then " \
+		"booti ${loadaddr} - ${fdt_addr_r}; " \
+	    "else " \
+		"echo WARN: Cannot load the DT; " \
+	    "fi; " \
+	"else " \
+	    "booti; " \
+	"fi;\0" \
+    "bsp_bootcmd=echo Running BSP bootcmd ...; " \
+	"mmc dev ${mmcdev}; if mmc rescan; then " \
+	    "if run loadbootscript; then " \
+		"run bootscript; " \
+	    "else " \
+		"if run loadimage; then " \
+		    "run mmcboot; " \
+		"else run netboot; " \
 		"fi; " \
-		"${get_cmd} ${loadaddr} ${image}; " \
-		"if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
-			"if ${get_cmd} ${fdt_addr_r} ${fdt_file}; then " \
-				"booti ${loadaddr} - ${fdt_addr_r}; " \
-			"else " \
-				"echo WARN: Cannot load the DT; " \
-			"fi; " \
-		"else " \
-			"booti; " \
-		"fi;\0" \
-	"bsp_bootcmd=echo Running BSP bootcmd ...;" \
-		"mmc dev ${mmcdev}; if mmc rescan; then " \
-		   "if run loadbootscript; then " \
-			   "run bootscript; " \
-		   "else " \
-			   "if run loadimage; then " \
-				   "run mmcboot; " \
-			   "else run netboot; " \
-			   "fi; " \
-		   "fi; " \
-	   "fi;"
+	    "fi; " \
+	"fi;"
 
 /* Link Definitions */
 
@@ -145,6 +141,7 @@
 #define CFG_SYS_INIT_RAM_SIZE        0x200000
 
 #define CFG_MMCROOT			"/dev/mmcblk2p2"  /* USDHC2 */
+#define DATA_PART                       "/dev/mmcblk2p3" /* Data partition on the third partition */
 
 #define CFG_SYS_SDRAM_BASE              0x40000000
 #define PHYS_SDRAM                      0x40000000
